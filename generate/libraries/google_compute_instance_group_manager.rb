# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
require 'google/compute/property/instancegroupmanager_current_actions'
require 'google/compute/property/instancegroupmanager_named_ports'

# A provider to manage Compute Engine resources.
class ComputeInstanceGroupManager < GcpResourceBase
  name 'google_compute_instance_group_manager'
  desc 'InstanceGroupManager'
  supports platform: 'gcp'

  attr_reader :params
  attr_reader :base_instance_name
  attr_reader :creation_timestamp
  attr_reader :current_actions
  attr_reader :description
  attr_reader :id
  attr_reader :instance_group
  attr_reader :instance_template
  attr_reader :name
  attr_reader :named_ports
  attr_reader :region
  attr_reader :target_pools
  attr_reader :target_size
  attr_reader :zone

  def initialize(params)
    super(params.merge({ use_http_transport: true }))
    @params = params
    @fetched = @connection.fetch(product_url, resource_base_url, params, 'Get')
    parse unless @fetched.nil?
    @params = params
  end

  def parse
    @base_instance_name = @fetched['baseInstanceName']
    @creation_timestamp = parse_time_string(@fetched['creationTimestamp'])
    @current_actions = GoogleInSpec::Compute::Property::InstanceGroupManagerCurrentActions.new(@fetched['currentActions'], to_s)
    @description = @fetched['description']
    @id = @fetched['id']
    @instance_group = @fetched['instanceGroup']
    @instance_template = @fetched['instanceTemplate']
    @name = @fetched['name']
    @named_ports = GoogleInSpec::Compute::Property::InstanceGroupManagerNamedPortsArray.parse(@fetched['namedPorts'], to_s)
    @region = @fetched['region']
    @target_pools = @fetched['targetPools']
    @target_size = @fetched['targetSize']
    @zone = @fetched['zone']
  end

  # Handles parsing RFC3339 time string
  def parse_time_string(time_string)
    time_string ? Time.parse(time_string) : nil
  end

  def exists?
    !@fetched.nil?
  end

  def to_s
    "InstanceGroupManager #{@params[:name]}"
  end

  def un_parse
    {
      'base_instance_name' => ->(x, _) { x.nil? ? [] : ["its('base_instance_name') { should cmp #{x.inspect} }"] },
      'creation_timestamp' => ->(x, _) { x.nil? ? [] : ["its('creation_timestamp.to_s') { should cmp '#{x.inspect}' }"] },
      'current_actions' => ->(x, _) { x.nil? ? [] : GoogleInSpec::Compute::Property::InstanceGroupManagerCurrentActions.un_parse(x, 'current_actions') },
      'description' => ->(x, _) { x.nil? ? [] : ["its('description') { should cmp #{x.inspect} }"] },
      'id' => ->(x, _) { x.nil? ? [] : ["its('id') { should cmp #{x.inspect} }"] },
      'instance_group' => ->(x, _) { x.nil? ? [] : ["its('instance_group') { should cmp #{x.inspect} }"] },
      'instance_template' => ->(x, _) { x.nil? ? [] : ["its('instance_template') { should cmp #{x.inspect} }"] },
      'name' => ->(x, _) { x.nil? ? [] : ["its('name') { should cmp #{x.inspect} }"] },
      'named_ports' => ->(x, _) { x.nil? ? [] : x.map { |single| "its('named_ports') { should include '#{single.to_json}' }" } },
      'region' => ->(x, _) { x.nil? ? [] : ["its('region') { should cmp #{x.inspect} }"] },
      'target_pools' => ->(x, _) { x.nil? ? [] : x.map { |single| "its('target_pools') { should include #{single.inspect} }" } },
      'target_size' => ->(x, _) { x.nil? ? [] : ["its('target_size') { should cmp #{x.inspect} }"] },
      'zone' => ->(x, _) { x.nil? ? [] : ["its('zone') { should cmp #{x.inspect} }"] },
    }
  end

  def dump(path, template_path, test_number, ignored_fields)
    name = 'InstanceGroupManager'

    arr = un_parse.map do |k, v|
      next if ignored_fields.include?(k)
      v.call(method(k.to_sym).call, k)
    end
    template_vars = {
      name: name,
      arr: arr,
      type: 'google_compute_instance_group_manager',
      identifiers: @params,
      number: test_number,
    }
    File.open("#{path}/#{name}_#{test_number}.rb", 'w') do |file|
      file.write(ERB.new(File.read(template_path)).result_with_hash(template_vars))
    end
  end

  private

  def product_url
    'https://www.googleapis.com/compute/v1/'
  end

  def resource_base_url
    'projects/{{project}}/zones/{{zone}}/instanceGroupManagers/{{name}}'
  end
end
