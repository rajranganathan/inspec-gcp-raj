# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
module GoogleInSpec
  module Compute
    module Property
      class HealthCheckTcpHealthCheck
        attr_reader :arguments

        attr_reader :request

        attr_reader :response

        attr_reader :port

        attr_reader :port_name

        attr_reader :proxy_header

        attr_reader :port_specification

        def initialize(arguments = nil, parent_identifier = nil)
          @arguments = arguments
          return if arguments.nil?
          @parent_identifier = parent_identifier
          @request = arguments['request']
          @response = arguments['response']
          @port = arguments['port']
          @port_name = arguments['portName']
          @proxy_header = arguments['proxyHeader']
          @port_specification = arguments['portSpecification']
        end

        def to_s
          "#{@parent_identifier} HealthCheckTcpHealthCheck"
        end

        def self.un_parse(item, current_path)
          return if item.nil?
          way_to_parse = {
            'request' => ->(x, path) { x.nil? ? [] : ["its('#{path}.request') { should cmp #{x.inspect} }"] },
            'response' => ->(x, path) { x.nil? ? [] : ["its('#{path}.response') { should cmp #{x.inspect} }"] },
            'port' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port') { should cmp #{x.inspect} }"] },
            'port_name' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port_name') { should cmp #{x.inspect} }"] },
            'proxy_header' => ->(x, path) { x.nil? ? [] : ["its('#{path}.proxy_header') { should cmp #{x.inspect} }"] },
            'port_specification' => ->(x, path) { x.nil? ? [] : ["its('#{path}.port_specification') { should cmp #{x.inspect} }"] },
          }
          way_to_parse.map do |k, v|
            v.call(item.method(k).call, current_path)
          end
        end

        def to_json(*_args)
          @arguments.to_json
        end

        # other is a string representation of this object
        def ==(other)
          @arguments == JSON.parse(other)
        end
      end
    end
  end
end
