# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
module GoogleInSpec
  module CloudBuild
    module Property
      class TriggerTriggerTemplate
        attr_reader :arguments

        attr_reader :project_id

        attr_reader :repo_name

        attr_reader :dir

        attr_reader :branch_name

        attr_reader :tag_name

        attr_reader :commit_sha

        def initialize(arguments = nil, parent_identifier = nil)
          @arguments = arguments
          return if arguments.nil?
          @parent_identifier = parent_identifier
          @project_id = arguments['projectId']
          @repo_name = arguments['repoName']
          @dir = arguments['dir']
          @branch_name = arguments['branchName']
          @tag_name = arguments['tagName']
          @commit_sha = arguments['commitSha']
        end

        def to_s
          "#{@parent_identifier} TriggerTriggerTemplate"
        end

        def self.un_parse(item, current_path)
          return if item.nil?
          way_to_parse = {
            'project_id' => ->(x, path) { x.nil? ? [] : ["its('#{path}.project_id') { should cmp #{x.inspect} }"] },
            'repo_name' => ->(x, path) { x.nil? ? [] : ["its('#{path}.repo_name') { should cmp #{x.inspect} }"] },
            'dir' => ->(x, path) { x.nil? ? [] : ["its('#{path}.dir') { should cmp #{x.inspect} }"] },
            'branch_name' => ->(x, path) { x.nil? ? [] : ["its('#{path}.branch_name') { should cmp #{x.inspect} }"] },
            'tag_name' => ->(x, path) { x.nil? ? [] : ["its('#{path}.tag_name') { should cmp #{x.inspect} }"] },
            'commit_sha' => ->(x, path) { x.nil? ? [] : ["its('#{path}.commit_sha') { should cmp #{x.inspect} }"] },
          }
          way_to_parse.map do |k, v|
            v.call(item.method(k).call, current_path)
          end
        end

        def to_json(*_args)
          @arguments.to_json
        end

        # other is a string representation of this object
        def ==(other)
          @arguments == JSON.parse(other)
        end
      end
    end
  end
end
