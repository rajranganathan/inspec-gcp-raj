# frozen_string_literal: false

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------
require 'gcp_backend'
class AppEngineStandardAppVersions < GcpResourceBase
  name 'google_appengine_standard_app_versions'
  desc 'StandardAppVersion plural resource'
  supports platform: 'gcp'

  attr_reader :table

  filter_table_config = FilterTable.create

  filter_table_config.add(:names, field: :name)
  filter_table_config.add(:version_ids, field: :version_id)
  filter_table_config.add(:runtimes, field: :runtime)
  filter_table_config.add(:threadsaves, field: :threadsafe)
  filter_table_config.add(:vpc_access_connectors, field: :vpc_access_connector)
  filter_table_config.add(:inbound_services, field: :inbound_services)
  filter_table_config.add(:instance_classes, field: :instance_class)
  filter_table_config.add(:automatic_scalings, field: :automatic_scaling)
  filter_table_config.add(:basic_scalings, field: :basic_scaling)
  filter_table_config.add(:manual_scalings, field: :manual_scaling)

  filter_table_config.connect(self, :table)

  def initialize(params = {})
    super(params.merge({ use_http_transport: true }))
    @params = params
    @table = fetch_wrapped_resource('versions')
  end

  def fetch_wrapped_resource(wrap_path)
    # fetch_resource returns an array of responses (to handle pagination)
    result = @connection.fetch_all(product_url, resource_base_url, @params, 'Get')
    return if result.nil?

    # Conversion of string -> object hash to symbol -> object hash that InSpec needs
    converted = []
    result.each do |response|
      next if response.nil? || !response.key?(wrap_path)
      response[wrap_path].each do |hash|
        hash_with_symbols = {}
        hash.each_key do |key|
          name, value = transform(key, hash)
          hash_with_symbols[name] = value
        end
        converted.push(hash_with_symbols)
      end
    end

    converted
  end

  def transform(key, value)
    return transformers[key].call(value) if transformers.key?(key)

    [key.to_sym, value]
  end

  def transformers
    {
      'name' => ->(obj) { return :name, obj['name'] },
      'id' => ->(obj) { return :version_id, obj['id'] },
      'runtime' => ->(obj) { return :runtime, obj['runtime'] },
      'threadsafe' => ->(obj) { return :threadsafe, obj['threadsafe'] },
      'vpcAccessConnector' => ->(obj) { return :vpc_access_connector, GoogleInSpec::AppEngine::Property::StandardAppVersionVPCAccessConnector.new(obj['vpcAccessConnector'], to_s) },
      'inboundServices' => ->(obj) { return :inbound_services, obj['inboundServices'] },
      'instanceClass' => ->(obj) { return :instance_class, obj['instanceClass'] },
      'automaticScaling' => ->(obj) { return :automatic_scaling, GoogleInSpec::AppEngine::Property::StandardAppVersionAutomaticScaling.new(obj['automaticScaling'], to_s) },
      'basicScaling' => ->(obj) { return :basic_scaling, GoogleInSpec::AppEngine::Property::StandardAppVersionBasicScaling.new(obj['basicScaling'], to_s) },
      'manualScaling' => ->(obj) { return :manual_scaling, GoogleInSpec::AppEngine::Property::StandardAppVersionManualScaling.new(obj['manualScaling'], to_s) },
    }
  end

  private

  def product_url(_ = nil)
    'https://appengine.googleapis.com/v1/'
  end

  def resource_base_url
    'apps/{{project}}/services/{{service}}/versions'
  end
end
